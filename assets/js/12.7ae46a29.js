(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{367:function(t,e,a){"use strict";a.r(e);var l=a(42),v=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),a("ul",[a("li",[t._v("CSRF通常发生在第三方域名")]),t._v(" "),a("li",[t._v("CSRF攻击者不能获取到Cookie信息，只是使用")])]),t._v(" "),a("p",[t._v("防护策略：")]),t._v(" "),a("ul",[a("li",[t._v("同源检测")]),t._v(" "),a("li",[t._v("Samesite Cookie")]),t._v(" "),a("li",[t._v("token")])]),t._v(" "),a("h3",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),a("ul",[a("li",[t._v("持久化缓存")]),t._v(" "),a("li",[t._v("根据内容生成chunkhash，相对以往不会因为空格的改动使得缓存失效")]),t._v(" "),a("li",[t._v("moduleId不自增，不会因为添加或删除新的module导致缓存失效")]),t._v(" "),a("li",[t._v("prepack")]),t._v(" "),a("li",[t._v("更好的treeshaking")])]),t._v(" "),a("p",[t._v("Webpack 的运行流程是一个串行的过程,从启动到结束会依次执行以下流程 :")]),t._v(" "),a("p",[t._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数,得出最终的参数。\n开始编译：用上一步得到的参数初始化 Compiler 对象,加载所有配置的插件,执行对象的 run 方法开始执行编译。\n确定入口：根据配置中的 entry 找出所有的入口文件。\n编译模块：从入口文件出发,调用所有配置的 Loader 对模块进行翻译,再找出该模块依赖的模块,再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。\n完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后,得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。\n输出资源：根据入口和模块之间的依赖关系,组装成一个个包含多个模块的 Chunk,再把每个 Chunk 转换成一个单独的文件加入到输出列表,这步是可以修改输出内容的最后机会。\n输出完成：在确定好输出内容后,根据配置确定输出的路径和文件名,把文件内容写入到文件系统。")]),t._v(" "),a("p",[t._v("在以上过程中,Webpack 会在特定的时间点广播出特定的事件,插件在监听到感兴趣的事件后会执行特定的逻辑,并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),t._v(" "),a("h3",{attrs:{id:"title3-01"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#title3-01"}},[t._v("#")]),t._v(" title3-01")]),t._v(" "),a("h2",{attrs:{id:"small-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#small-title"}},[t._v("#")]),t._v(" small title")]),t._v(" "),a("p",[t._v("content...")])])}),[],!1,null,null,null);e.default=v.exports}}]);